unit uBanheiro;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uFrmHeranca, Data.DB, Data.Win.ADODB,
  Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls, Vcl.Mask, Vcl.ComCtrls, Vcl.DBCtrls,
  Vcl.Buttons, Vcl.ExtCtrls, RxToolEdit, uDtmConexao, uEnum, cBanheiro, System.StrUtils;

type
  TfrmBanheiro = class(TfrmHeranca)
    edtCodigo: TLabeledEdit;
    edtData: TDateEdit;
    lblDataNascimento: TLabel;
    edtDiurese: TLabeledEdit;
    edtEvacuacao: TLabeledEdit;
    cbEvacuacao: TCheckBox;
    cbDiurese: TCheckBox;
    edtCliente: TDBLookupComboBox;
    lblCliente: TLabel;
    dtsClientes: TDataSource;
    qryClientes: TADOQuery;
    qryListaBANHEIRO_ID: TAutoIncField;
    qryListaQTD_DIURESE: TIntegerField;
    qryListaQTD_EVACUACAO: TIntegerField;
    qryListaDIURESE: TStringField;
    qryListaEVACUACAO: TStringField;
    qryListaDATA_BANHEIRO: TDateTimeField;
    qryListaCLIENTE_ID: TIntegerField;
    qryListaNOME: TStringField;
    qryListaOBSERVACAO: TMemoField;
    memoObs: TMemo;
    lblObs: TLabel;
    qryListaASPECTO_EVACUACAO: TStringField;
    qryListaASPECTO_DIURESE: TStringField;
    edtAspDiurese: TLabeledEdit;
    edtAspEvacuacao: TLabeledEdit;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure gridListaDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure gridListaDblClick(Sender: TObject);
    procedure edtEvacuacaoChange(Sender: TObject);
    procedure edtDiureseChange(Sender: TObject);
    procedure edtDataExit(Sender: TObject);
    procedure edtClienteExit(Sender: TObject);
  private
    { Private declarations }
    oBanheiro : TBanheiro;
  public
    { Public declarations }
    function Apagar: Boolean; override;
    function Salvar(estadoCadastro: TEstadoCadastro): Boolean; override;
  end;

var
  frmBanheiro: TfrmBanheiro;

implementation

{$R *.dfm}

{ TfrmBanheiro }

function TfrmBanheiro.Apagar: Boolean;
begin
  if MessageDlg('Deseja mesmo apagar o registro atual?', mtConfirmation, [mbYes, mbNo],0) = mrNo then
    Abort;

  Result := oBanheiro.Apagar(qryLista.FieldByName('BANHEIRO_ID').AsInteger);
end;

procedure TfrmBanheiro.btnAlterarClick(Sender: TObject);
begin
  if oBanheiro.Selecionar(qryLista.FieldByName('BANHEIRO_ID').AsInteger) then
  begin
    edtCodigo.Text := oBanheiro.BanheiroId.ToString;
    edtDiurese.Text := oBanheiro.QtdDiurese.ToString;
    edtEvacuacao.Text := oBanheiro.QtdEvacuacao.ToString;
    cbDiurese.Checked := oBanheiro.Diurese = 'T';
    cbEvacuacao.Checked :=oBanheiro.Evacuacao = 'T';
    edtData.Date :=oBanheiro.DataBanheiro;
    memoObs.Text := oBanheiro.Observacao;
    edtAspDiurese.Text := oBanheiro.AspectoDiurese;
    edtAspEvacuacao.Text := oBanheiro.AspectoEvacuacao;
    edtCliente.KeyValue := oBanheiro.ClienteId.ToString;
  end
  else
  begin
    btnCancelar.Click;
    Abort;
  end;

  inherited;
end;

procedure TfrmBanheiro.edtClienteExit(Sender: TObject);
begin
  inherited;
  if VarIsNull(edtCliente.KeyValue) then
  begin
    MessageDlg('Atenção! O campo morador(a) é obrigatório', mtInformation,[mbOk],0);
    abort;
  end;
end;

procedure TfrmBanheiro.edtDataExit(Sender: TObject);
begin
  inherited;
  if (edtData.Date > Now) then
  begin
    MessageDlg('Atenção! A data de utilização do banheiro não pode ser maior que o dia atual!', mtInformation,[mbOk],0);
    abort;
  end;
end;

procedure TfrmBanheiro.edtDiureseChange(Sender: TObject);
begin
  if (edtDiurese.Text <> '') and not (edtDiurese.Text = '0') and (cbDiurese.Checked = False) then
  begin
    MessageDlg('Atenção! Para alterar a quantidade é necessário ter marcado o campo "Diurese?"', mtInformation,[mbOk],0);
    edtDiurese.Text := '';
  end;
end;

procedure TfrmBanheiro.edtEvacuacaoChange(Sender: TObject);
begin
  if (edtEvacuacao.Text <> '') and not (edtEvacuacao.Text = '0') and (cbEvacuacao.Checked = False) then
  begin
    MessageDlg('Atenção! Para alterar a quantidade é necessário ter marcado o campo "Evacuou?"', mtInformation,[mbOk],0);
    edtEvacuacao.Text := '';
  end;
end;

procedure TfrmBanheiro.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  qryClientes.Close;
  if Assigned(oBanheiro) then
    FreeAndNil(oBanheiro)
end;

procedure TfrmBanheiro.FormCreate(Sender: TObject);
begin
  inherited;
  oBanheiro := TBanheiro.Create(dtmConexao.conexaoDB);
  IndiceAtual := 'nome';
end;

procedure TfrmBanheiro.FormShow(Sender: TObject);
begin
  inherited;
  qryClientes.Open;
end;

procedure TfrmBanheiro.gridListaDblClick(Sender: TObject);
begin
  if ((Sender as TDBGrid).DataSource.Dataset.IsEmpty) then
    Exit;

  (Sender as TDBGrid).DataSource.Dataset.Edit;

  if ((Sender as TDBGrid).DataSource.Dataset.FieldByName('DIURESE').AsString = 'T') then
    (Sender as TDBGrid).DataSource.Dataset.FieldByName('DIURESE').AsString := 'F'
  else
    (Sender as TDBGrid).DataSource.Dataset.FieldByName('DIURESE').AsString := 'T';

  if ((Sender as TDBGrid).DataSource.Dataset.FieldByName('EVACUACAO').AsString = 'T') then
    (Sender as TDBGrid).DataSource.Dataset.FieldByName('EVACUACAO').AsString := 'F'
  else
    (Sender as TDBGrid).DataSource.Dataset.FieldByName('EVACUACAO').AsString := 'T';

  (Sender as TDBGrid).DataSource.Dataset.Post;

  inherited;
end;

procedure TfrmBanheiro.gridListaDrawColumnCell(
   Sender: TObject; const Rect: TRect; DataCol:
   Integer; Column: TColumn; State: TGridDrawState);
var
  Check: Integer;
  R: TRect;
begin
  inherited;

  if ((Sender as TDBGrid).DataSource.Dataset.IsEmpty) then
    Exit;

  if (Column.FieldName = 'DIURESE') or (Column.FieldName = 'EVACUACAO') then
  begin
    TDBGrid(Sender).Canvas.FillRect(Rect);

    if ((Sender as TDBGrid).DataSource.Dataset.FieldByName(Column.FieldName).AsString = 'T') then
      Check := DFCS_CHECKED
    else
      Check := 0;

    R := Rect;
    InflateRect(R, -2, -2);
    DrawFrameControl(TDBGrid(Sender).Canvas.Handle, R, DFC_BUTTON,
      DFCS_BUTTONCHECK or Check);
  end;
end;

function TfrmBanheiro.Salvar(estadoCadastro: TEstadoCadastro): Boolean;
begin
  Result := False;

  if edtCodigo.Text <> EmptyStr then
    oBanheiro.BanheiroId := StrToInt(edtCodigo.Text)
  else
    oBanheiro.BanheiroId := 0;

  if edtDiurese.Text = '' then
    oBanheiro.QtdDiurese := 0
  else  
    oBanheiro.QtdDiurese := StrToInt(edtDiurese.Text);
  
  if edtEvacuacao.Text = '' then
    oBanheiro.QtdEvacuacao := 0
  else
    oBanheiro.QtdEvacuacao := StrToInt(edtEvacuacao.Text);
  
  if cbDiurese.Checked then
    oBanheiro.Diurese := 'T'
  else
    oBanheiro.Diurese := 'F';

  if cbEvacuacao.Checked then
    oBanheiro.Evacuacao := 'T'
  else
    oBanheiro.Evacuacao := 'F';

  oBanheiro.DataBanheiro := edtData.Date;

  if not VarIsNull(edtCliente.KeyValue) then  
    oBanheiro.ClienteId := edtCliente.KeyValue
  else
    oBanheiro.ClienteId := 0;
    
  oBanheiro.Observacao := memoObs.Text;
  oBanheiro.AspectoEvacuacao := edtAspEvacuacao.Text;
  oBanheiro.AspectoEvacuacao:= edtAspEvacuacao.Text;

  if EstadoCadastro = ecNovo then
    Result := oBanheiro.Inserir
  else if EstadoCadastro = ecAlterar then
    Result := oBanheiro.Atualizar;
end;

end.
